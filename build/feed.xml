<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Prismatik Blog</title>
    <atom:link href="http://blog.prismatik.com.au/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://blog.prismatik.com.au</link>
    <description>Things we find interesting.</description>
    <pubDate>Wed, 06 Apr 2016 10:00:00 +1000</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>How To Stop Babeling And Start Enjoying NodeJS</title>
      <link>http://blog.prismatik.com.au/articles/stop-babeling-and-start-enjoying/</link>
      <pubDate>Wed, 06 Apr 2016 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/stop-babeling-and-start-enjoying/</guid>
      <author></author>
      <description>&lt;p&gt;Like many of you, I had also been bitten by the &lt;a href=&quot;https://babeljs.io&quot;&gt;babeljs&lt;/a&gt;
bug. The promise is actually pretty neat: have all the futuristic twinky dinkies
right now and deploy them anywhere. Just jack in a &lt;code&gt;postinstall&lt;/code&gt; hook and it
will be all magic and unicorns from there. Destructurning, async/await, default
parameters all the really nice things will be just waiting to be used for good
and awesome.&lt;/p&gt;
&lt;p&gt;The truth is, I kind of grew cold to it. Babel is great and a really impressive
piece of work, but, I feel like it robs me of what I really like about #nodejs;
its simplicity and nimbleness. I always loved how fast node is. How easy it
is to prototype with. You just &lt;code&gt;npm init&lt;/code&gt;, throw couple of packages together
and you have a thing.&lt;/p&gt;
&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Babel touches pretty much every step of a development process in node. And being
in this position it adds overhead to pretty much everything you do. Have source
code? Now you have to compile it and add an extra thing to worry about in production.
Have tests? Yeah, you need to figure how to stitch it together with your babel
build pipes. Use eslint? You need the &lt;code&gt;babel-eslint&lt;/code&gt;, etc, etc.&lt;/p&gt;
&lt;p&gt;And the problem grows like a snow ball. Now you have an extra thing attached
to everything you do. And there are several ways to setup every one of them. Do
we call it &lt;code&gt;npm run build&lt;/code&gt; or &lt;code&gt;npm run compile&lt;/code&gt;? Do we precompile things in dev
or we use &lt;code&gt;babel-node&lt;/code&gt;? The list is goes on and on.&lt;/p&gt;
&lt;p&gt;It got me thinking. What do I actually want from babel? Can I survive without
those features? Which ones can I have without babel, like maybe with &lt;code&gt;--harmony&lt;/code&gt;
flags? Turned out the answer was: “not that many”, “yes”, “most of them”.&lt;/p&gt;
&lt;p&gt;Allow me to walk you through the cases.&lt;/p&gt;
&lt;h3 id=&quot;block-scope-variables&quot;&gt;Block Scope Variables&lt;/h3&gt;
&lt;p&gt;I really, really like the new &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; markers in #javascript #es6 edition.
It is such a nice way to give yourself a hint what supposed to change and what’s
not. Plus, being a block scope variable (or a constant) it allows the javascript
engine to perform various optimizations on your code, and, potentially, save
you from wicked bugs from var names leaking out of a scope.&lt;/p&gt;
&lt;p&gt;Turned out, you can have it in NodeJS right now. Just add &lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt; on
top of your file and it will handle block scope variables really nicely and
efficiently. Or, if you’re too lazy for touching every file, just run your node
like this &lt;code&gt;node --use_strict blah.js&lt;/code&gt; and it will force strict mode to all your
files in the runtime. Which is the way I prefer to do it.&lt;/p&gt;
&lt;p&gt;Interestingly enough, if you were sloppy and just jacked &lt;code&gt;es2015&lt;/code&gt; preset into
your babel config, it will pretty much convert all your carefully marked consts
and lets into good ol’ &lt;code&gt;var&lt;/code&gt;. In which case you will just delude yourself into
thinking that you’re doing the right thing.&lt;/p&gt;
&lt;h3 id=&quot;destructuring&quot;&gt;Destructuring&lt;/h3&gt;
&lt;p&gt;Destructuring in ES6 is awesome. It has pretty much the same effect on your
programming as pattern matching, but without you feeling smug about it. I would
still prefer to have a real pattern matching engine in JavaScript some day, but
right now it’s just about destructuring objects and arrays.&lt;/p&gt;
&lt;p&gt;Turns out that node already has the &lt;code&gt;--harmony_destructuring&lt;/code&gt; flag available,
which turns on the native support for destructuring operators. And if you think
of it for a second, it is actually a much better option than doing it with
babel. Because babel does it manually through javascript and harmony does it
natively in C. So, it is much faster in node than in babel.&lt;/p&gt;
&lt;h3 id=&quot;default-rest-params&quot;&gt;Default &amp;amp; Rest Params&lt;/h3&gt;
&lt;p&gt;Being someone who flips between ruby and javascript all the time, I really find
the default and rest params syntax useful. I liked it very much that babel allows
me to be in a similar mindset between languages.&lt;/p&gt;
&lt;p&gt;Well, actually, there are &lt;code&gt;--harmony_default_parameters&lt;/code&gt; and &lt;code&gt;--harmony_rest_parameters&lt;/code&gt;
options in node right now that flip native support for those features. There
is also &lt;code&gt;--harmony_spreadcalls&lt;/code&gt; to spread arrays into args when you call functions.&lt;/p&gt;
&lt;p&gt;And the same argument goes for this as for the destructuring feature. Native
support is much faster and more likely being carried over in its current
implementation to the future versions than what is in babel.&lt;/p&gt;
&lt;h3 id=&quot;spread-operators&quot;&gt;Spread Operators&lt;/h3&gt;
&lt;p&gt;I really like spreads. Actually, recently, I become somewhat of an amateur
artisan peanut butter maker. I freshly roast my peanuts, then use raw unprocessed
honey and himalayan salt. So, good… (see what i did there?)&lt;/p&gt;
&lt;p&gt;Either way, you can turn on native array spreads with the &lt;code&gt;--harmony_spread_arrays&lt;/code&gt;
flag. As the name implies, at the moment, it only does arrays. But, you know what?
I really don’t mind &lt;code&gt;Object.assign&lt;/code&gt;. More of that, I kind of like it, because unlike
the spread operator, it doesn’t explode when one of the arguments is a &lt;code&gt;null&lt;/code&gt; or
&lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Plus, there are the harmony &lt;code&gt;rest_parameters&lt;/code&gt; and &lt;code&gt;spreadcalls&lt;/code&gt; that accompany
the spreadness of the experience. So, you mostly can have native spreads right
now.&lt;/p&gt;
&lt;h3 id=&quot;async-await-and-stuff&quot;&gt;Async/Await and Stuff&lt;/h3&gt;
&lt;p&gt;This was one of the primary driving forces behind me really wanting to jack
babel in pretty much every project i’ve been working on. It makes it so much
easier to deal with async control flow. It makes all your code more maintainable
as well. And the best thing, you can mix it with pretty much anything that talks
promises!&lt;/p&gt;
&lt;p&gt;But, guess what. Babel, when set up properly, just converts all your async awaits
into &lt;code&gt;function *() { yield }&lt;/code&gt;. You can have exactly all the same results right
now with generators and &lt;code&gt;yields&lt;/code&gt;. It is mind bogglingly fast and production
ready.&lt;/p&gt;
&lt;p&gt;More of that, most of high profile libraries out there already support generators.
Here for example #expressjs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&quot;/users/:id&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; User.find(req.params.id);
  res.json(user);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is mochajs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&quot;allows to access a user's data&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; server.get(&lt;span class=&quot;string&quot;&gt;&quot;/users/123&quot;&lt;/span&gt;);

  expect(response.status).to.eql(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);
  expect(response.body).to.eql({id: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, username: &lt;span class=&quot;string&quot;&gt;&quot;nikolay&quot;&lt;/span&gt;});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works right now! More of that, unlike &lt;code&gt;async/await&lt;/code&gt;, the modern implementation
of generators works with both promises and node style callbacks. Which means
that you don’t need to drag around bluebird and promisify everything like a
monkey:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; User = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;models/user&quot;&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; fs.readFile(&lt;span class=&quot;string&quot;&gt;&quot;/blah&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// node style callback&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; User.find(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// a promise from some ORM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More of that, yields are actually so much betterer than promises when things
come to errors handling. Raise your hand if you were in a situation where
someone forgot to add a &lt;code&gt;.catch&lt;/code&gt; section to a promise and all errors went unnoticed?
Yeah, I think we’ve all been there. Doesn’t happen with generators.&lt;/p&gt;
&lt;p&gt;And yet more of that, generators unlock other features that are a total pain in
the butt with Promises. For example when you need to process a bunch of async tasks
sequentially. Or, for example, try to write an async &lt;code&gt;while&lt;/code&gt; block in Promises.
It is a lot of fun.&lt;/p&gt;
&lt;p&gt;Just open your heart to generators, it will worth your while. After all Promises
don’t go anywhere, you can mix and match them with generators too and have best
of both worlds. But, you don’t need async/await to get there.&lt;/p&gt;
&lt;h3 id=&quot;es6-module-imports-exports&quot;&gt;ES6 Module Imports/Exports&lt;/h3&gt;
&lt;p&gt;You can’t have them in node at the moment. I know, a bummer. But, you know what?
I’m okay with that. Destructuring gives me almost all the same thing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; { blah, blah } = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./blahs&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not that far from&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { blah, blah } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./blahs&quot;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Totally survivable and a good exchange for lack of overheads babel adds everywhere.&lt;/p&gt;
&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Recently I have converted several of my medium sized nodejs projects from babel
to node+harmony. Surprisingly, the transition went really smoothly. Well, I had
a good tests coverage in all of them to back me up. But, I was surprised how
trivial it was and how much faster and more pleasant the projects become after
the transition.&lt;/p&gt;
&lt;p&gt;I know I’m off the hook now and I’m not doing back. I can have practically all the
same things I have with babel in a fast native form directly in node. My
dependencies list shrunk several times. Deployment become trivial — it’s just
the good old &lt;code&gt;npm start&lt;/code&gt; now.&lt;/p&gt;
&lt;p&gt;One thing though. All those harmonly flags is a bit of a drag to carry around. I
really wish node had some sort of a &lt;code&gt;.noderc&lt;/code&gt; file where I could specify all those
flags in one place and then just call plain &lt;code&gt;node blah.js&lt;/code&gt;. But, still it is
a small price to pay for the returned agility and nimbleness of a pure nodejs
project.&lt;/p&gt;
&lt;p&gt;And that is pretty much all I have to say on the subject.&lt;/p&gt;
&lt;p&gt;Love &amp;amp; kisses. Nikolay&lt;/p&gt;
&lt;p&gt;PS: I’m really stocked about Node 6. Apparently a good half of the features that
I need will graduate to be production ready. Plus thar be Proxies!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally hosted on: &lt;a href=&quot;http://nikolay.rocks/2016-04-04-how-to-stop-babel&quot;&gt;nikolay.rocks&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Snippets in Vim</title>
      <link>http://blog.prismatik.com.au/articles/vim-snippets/</link>
      <pubDate>Tue, 15 Mar 2016 11:00:00 +1100</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/vim-snippets/</guid>
      <author></author>
      <description>&lt;p&gt;Last week a colleague of mine who was watching me code asked me; “why don’t you use snippets”? It was a very good question but I’d just never given much thought to the repetition involved in writing code. The more I thought about it, the more I thought how many times have I written out the same &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;it&lt;/code&gt; block in mocha, defined a function or typed console.log! The answer? Far far too often. Setting up snippets is well worth the effort as the time saving in the long term will be pretty huge.&lt;/p&gt;
&lt;p&gt;So over the last couple of days I’ve spent some time investigating how to get snippets up and running in vim and also configuring them. Here’s how it’s done on OS X:&lt;/p&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Homebrew installed (required to compile YouCompleteMe)&lt;/li&gt;
&lt;li&gt;A vim plugin manager, vundle, pathogen etc…&lt;/li&gt;
&lt;li&gt;Some cursory vim knowledge, i.e. how to make changes to your .vimrc&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;setup-snippets-in-vim&quot;&gt;Setup Snippets in Vim&lt;/h3&gt;
&lt;p&gt;Step 1 - Install the &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;YouCompleteMe&lt;/a&gt; plugin (YCM).
YCM is a code completion engine for vim that will provide autocomplete suggestions as you type based on the language you are coding in. Installation of the plugin itself is fairly straight forward just note you must compile the plugin based on the languages you intend to use YCM for, refer to the documentation on github.&lt;/p&gt;
&lt;p&gt;It’s not actually clear from the documentation whether YCM is a requirement to use snippets (the UltiSnips plugin). In any case, I recommend installing YCM as the autocomplete it provides is fantastic and it detects snippets you’ve configured to list in the autocomplete box as well.&lt;/p&gt;
&lt;p&gt;Step 2 - Install the &lt;a href=&quot;https://github.com/SirVer/ultisnips&quot;&gt;UltiSnip&lt;/a&gt; vim plugin. You should now have the ability to start creating snippets. The installation guide recommends a &lt;code&gt;vim-snippets&lt;/code&gt; plugin which comes with a bunch of snippets out of the box, but I would recommend not installing that as it contains snippets for a wide variety of different languages, many of which you’ll probably never use.&lt;/p&gt;
&lt;p&gt;Step 3 - Configure the shortcuts for UltiSnips. UltiSnips needs three shortcuts to function, expand snippet, jump forward, jump backward. Expand snippet converts your abbreviation into the full snippet, and jump forward and backward let you cycle through the different inputs you’ve configured in the snippet itself. Add the below three lines to your &lt;code&gt;.vimrc&lt;/code&gt; changing the keybindings as appropriate (the below is my config). Do not bind expand to &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; as this conflicts with YCM.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let g:UltiSnipsExpandTrigger=&amp;quot;&amp;lt;c-s&amp;gt;&amp;quot;
let g:UltiSnipsJumpForwardTrigger=&amp;quot;&amp;lt;c-j&amp;gt;&amp;quot;
let g:UltiSnipsJumpBackwardTrigger=&amp;quot;&amp;lt;c-k&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 4 - Add some snippets!&lt;/p&gt;
&lt;p&gt;Snippets are very easy to add, simply open a file in vim that is associated with the language you want to create snippets for, i.e. a &lt;code&gt;.js&lt;/code&gt; file for javascript and type &lt;code&gt;:UltiSnipsEdit&lt;/code&gt;. This will open the snippets file where you can start to add snippets.&lt;/p&gt;
&lt;p&gt;Snippets are really easy to add! Below is an example…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;snippet fn &amp;quot;function&amp;quot; b
function ${1:functionName}(${2:arguements}) {
    $0
}
endsnippet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets walk through the syntax.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snippet&lt;/code&gt; - the start of your snippet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn&lt;/code&gt; - the trigger word for your snippet. Type &lt;code&gt;fn&lt;/code&gt; in insert mode, and then press your expand shortcut to substitute it with the full snippet (&lt;code&gt;control + s&lt;/code&gt; in my case).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;function&amp;quot;&lt;/code&gt; - a description of the snippet, visible in YCM’s menu.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; - best to &lt;a href=&quot;https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt#L665&quot;&gt;read the docs&lt;/a&gt; for this, but essentially snippet only expands if it is the first characters on a new line i.e. &lt;code&gt;fn&lt;/code&gt; cannot have any preceeding text, tabs and spaces are ok though!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${1:functionName}&lt;/code&gt; - the first piece of text in the snippet the user can customize, defaults to “functionName”. After pressing your jump forward shortcut (&lt;code&gt;control + j&lt;/code&gt; in my case) the first time, this is the text you will be able to edit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${2:arguements}&lt;/code&gt;  - the second piece of text in the snippet the user can customize, defaults to “functionName”.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt; - where the cursor will end up after you’re done editing the snippet text (after you’ve pressed the jump forward shortcut three times)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endsnippet&lt;/code&gt; - the end of your snippet text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: you can also just use &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; etc… if you want to insert text in your snippet but don’t need a placeholder.&lt;/p&gt;
&lt;p&gt;That’s pretty much it, your snippets are immediately available to use.&lt;/p&gt;
&lt;h3 id=&quot;what-else-&quot;&gt;What else?&lt;/h3&gt;
&lt;p&gt;As I said above, I wouldn’t recommend installing the &lt;code&gt;vim-snippets&lt;/code&gt; plugin, but that doesn’t mean it doesn’t have lots of great stuff. I’d recommend copying, pasting and then tweaking the snippets that are useful to you. Just checkout the &lt;a href=&quot;https://github.com/honza/vim-snippets/tree/master/UltiSnips&quot;&gt;github repo&lt;/a&gt; and copy what looks useful to you.&lt;/p&gt;
&lt;p&gt;There’s plenty more complexity here if you want to dive in. UltiSnip supports much more complex snippets, python interpolation can be used to achieve some fairly advanced snippets. I found a great snippet for requiring modules in node.js &lt;a href=&quot;https://medium.com/brigade-engineering/sharpen-your-vim-with-snippets-767b693886db#.53n8qt3p6&quot;&gt;here&lt;/a&gt;. This gives you some idea of much more powerful snippets you can write. I found this &lt;a href=&quot;http://wiki.yangleo.me/2013/10/29/write-UltiSnips-snippets.html&quot;&gt;wiki page&lt;/a&gt; to be a useful resource in writing snippets that’s less verbose than the UltiSnips docs.&lt;/p&gt;
&lt;p&gt;Finally I definitely recommend backing up your snippets! Snippets live in your &lt;code&gt;~/.vim/UltiSnips&lt;/code&gt; folder. I suggest replacing this path with a symlink or similar and storing your snippet files somewhere else that you regularly back up, like you’re hopefully doing with your dotfiles. A great idea is to keep them in git and make them public so that others can learn your tricks.&lt;/p&gt;
&lt;h3 id=&quot;javascript-and-youcompleteme&quot;&gt;Javascript and YouCompleteMe&lt;/h3&gt;
&lt;p&gt;I had a bit of trouble getting YCM to work with javascript/node.js as a bit more configuration is required. To provide javascript autocomplete suggestions YCM uses &lt;a href=&quot;http://ternjs.net/&quot;&gt;Tern&lt;/a&gt; which is automatically installed via the compilation step assuming you used the javascript flag. But for tern to function it requires a configuration file.&lt;/p&gt;
&lt;p&gt;Without this, you will get an error when opening a &lt;code&gt;.js&lt;/code&gt; file in vim along the lines of…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RuntimeError: Warning: Unable to detect a .tern-project file in the hierarchy before /PATH-HERE and no global .tern-config file was found. This is required for accurate JavaScript completion. Please see the User Guide for details.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can either do this with…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;.tern-project&lt;/code&gt; file in each of your project directories.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;.tern-config&lt;/code&gt; file in your home directory &lt;code&gt;~/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;this-file-configures-the-tern-engine-so-it-knows-what-type-of-javascript-you-are-coding-in-and-therefore-what-autocomplete-options-are-available-refer-tern-config-https-github-com-valloric-youcompleteme-javascript-semantic-completion-for-what-to-put-in-the-file-i-just-used-the-sample-node-js-config-provided-in-the-docs-&quot;&gt;This file configures the tern engine so it knows what type of javascript you are coding in and therefore what autocomplete options are available, refer &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe#javascript-semantic-completion&quot;&gt;tern config&lt;/a&gt; for what to put in the file. I just used the sample node.js config provided in the docs.&lt;/h2&gt;
</description>
    </item>
    <item>
      <title>Start with the problem, not the solution</title>
      <link>http://blog.prismatik.com.au/articles/start-with-the-problem/</link>
      <pubDate>Fri, 11 Mar 2016 11:00:00 +1100</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/start-with-the-problem/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;The key measure of success for the design phase is lack of surprises&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;System design is an accepted part of software development, and it only takes one bad experience of developing a project without a design to cement the worth of a design-first philosophy. A common mistake made by teams adopting a design-first philosophy is attempting to solve all of the problems which have been uncovered during the system design phase. Although the goal is admirable, this sort of thinking can result in a number of negative effects for both the product and the team.&lt;/p&gt;
&lt;p&gt;The most important part of the system design phase is to uncover future problems; fixing them is a secondary concern. Many of the most costly mistakes made during software development occur when a previously unforeseen problem is discovered. By this stage, previous development has often either removed many of the options that would solve the problem, else adopting the solution would invalidate previous development efforts. This can be avoided when developers and designers have prior knowledge of the problems which will ultimately require solutions, allowing them to take these into account throughout the development process.&lt;/p&gt;
&lt;p&gt;This does not mean that a problem can be completely ignored once it has been identified. The best-case scenario is for these issues to be solved prior to development, but this is often not practical. A reasonable outcome for unsolvable problems is a range of proposed solutions ideated for each problem, without firmly deciding on one. Having this list of solutions makes it easier to assess the future impact of a given solution, and easier to map to it and discuss it. By the time that it comes to actually develop the solution for the original unsolved problem, it will have been considered multiple times and from multiple angles as part of other development decisions, and the solution will become apparent far more easily and naturally.&lt;/p&gt;
&lt;p&gt;The key measure of success for the design phase is lack of surprises and less unforeseen problems occurring during development. Yes, it is lovely to have a system that is perfectly mapped out with all problems solved at the start, but that is impractical for most projects, and impossible for many. Trying to achieve the impossible in the design phase will quickly stymie the creativity of both designers and developers, leading to a bad outcome for everyone.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Learning Vim in 2015</title>
      <link>http://blog.prismatik.com.au/articles/learning-vim-in-2015/</link>
      <pubDate>Mon, 07 Sep 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/learning-vim-in-2015/</guid>
      <author></author>
      <description>&lt;p&gt;Earlier this year I made the leap from Sublime Text to Vim and I wanted to share my thoughts for others out there who are considering taking the plunge.&lt;/p&gt;
&lt;h3 id=&quot;why-bother-&quot;&gt;Why bother?&lt;/h3&gt;
&lt;p&gt;The biggest advantage of vim is your typing speed once you master its shortcuts. The speed advantage comes from your ability to navigate text without ever having to touch your mouse. In Atom or Sublime you are forever removing your right hand from the keyboard to hit the arrow keys or use the mouse. In vim, all navigation occurs via keystrokes and your hand never needs to leave the home row (in fact the mouse won’t work at all unless you go out of your way to enable it, which you shouldn’t…).&lt;/p&gt;
&lt;p&gt;This is achieved by switching between vim’s different “modes”. In insert mode the user can edit text as they would in any other editor, but by pressing escape, they can switch to “normal” mode. In “normal” mode, all keys are remapped to perform different functions. “J” moves down, “K” moves up, “H” moves left, “L” moves right etc… At any time you can press the “i” key they can switch back to insert mode.&lt;/p&gt;
&lt;p&gt;Vim also has some other amazing shortcuts that available in “normal” mode that greatly increase your editing efficiency. There are too many of these to list in few but some examples of what you can do purely with the A-Z keys in 1-2 key strokes, jump forward or backward a word at a time, jump to the start or end of the line, delete a whole word, delete an entire row, page/up down, jump to a specific line number and the list goes on… These same shortcuts exist in other editors, but because the A-Z keys are always bound to input the relevant letter, the shortcuts are far more awkward and require you to hold control / alt or command and press another key. In vim you simply change to “normal” mode and all your A-Z keys now become your shortcuts, no modifier keys required (mostly!).&lt;/p&gt;
&lt;p&gt;Another advantage of vim occurs when you need to ssh into a remote machine. Almost every machine you access will have vim already installed. You can be right at home with the editor you’re used to and edit files on the remote server with ease. This might seem like a small thing but it’s certainly not if you need to do this often. You can of course learn vim and only use it when editing files on remote servers, but it reduces the cognitive load to not have to mentally switch between different editors shortcuts. It is possible to get Atom and Sublime working on a remote server but it is not as natural as just opening a file within terminal.&lt;/p&gt;
&lt;p&gt;As a developer you’re highly likely to be using terminal for at least part of your workflow (unless you’re using a fully featured IDE). It might be to use git, install packages, spin up a web server, run automated tests etc… Whatever the reason, it’s certainly nice to have your editor running in the same environment. You can then easily switch between any terminal operations you need and your editor. &lt;code&gt;Ctrl + Z&lt;/code&gt; while in vim will hide your current vim session and throw you back into terminal to run other commands. You can then type &lt;code&gt;fg&lt;/code&gt; to switch back to your open vim session. It’s also easy to run a command and direct the output into vim.&lt;/p&gt;
&lt;p&gt;Vim is highly customisable and therefore a very personal editor. You can vastly change the way vim functions by installing / configuring plugins and adding keyboard shortcuts. Atom and Sublime are also customisable but the changes from a plugin never feel as radical as with vim. Vim can be customised so heavily that your configuration becomes completely integrated into your dev workflow. Using someone else’s configuration would feel completely alien and unweildy to you. Like wearing someone else’s underwear. One of the best examples of this is in how you choose to use “buffers” in vim which you can &lt;a href=&quot;https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/&quot;&gt;read about here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;any-downsides-to-using-vim-&quot;&gt;Any downsides to using vim?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It will never look quite as pretty as Atom or Sublime (is this actually a downside?)&lt;/li&gt;
&lt;li&gt;The plugins aren’t always as current as Atom or Sublime, but to date I’ve never been unable to find a plugin to do what I need. This will be greatly helped by &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;neovim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;i-hear-learning-vim-is-hard-is-it-really-&quot;&gt;I hear learning Vim is hard, is it really?&lt;/h3&gt;
&lt;p&gt;It’s not really, but getting it configured is really hard! One thing that surprised me about learning vim was that learning vim’s shortcuts is really not that hard. It might take a couple of weeks before you feel proficient but that’s really not the hard part about learning vim.&lt;/p&gt;
&lt;p&gt;The hardest part about learning vim is in configuring it. Out of the box vim includes very very few of the niceties you’ve come to expect from Sublime and Atom. There is no Command + P, no nice file browser, no tabs to switch between files, no across project search, no syntax highlighting, no auto closing brackets. Now that’s a lot of things it doesn’t have that you might want for free.&lt;/p&gt;
&lt;p&gt;The good news is that there is a plugin for all of those things, the bad news is you need to find it, install it and potentially configure it yourself. At this point you might be thinking, can’t someone just configure vim for me so I don’t have to? The answer to that is yes, you can copy someone else’s .vimrc file and configure your vim in one fell swoop. But you absolutely should not do that for it is a terrible idea that leads you down the dark path of never actually learning vim!&lt;/p&gt;
&lt;h3 id=&quot;how-should-i-learn-vim-&quot;&gt;How should I learn vim?&lt;/h3&gt;
&lt;p&gt;First run through &lt;code&gt;vimtutor&lt;/code&gt;. This is preinstalled on OSX, just open terminal, type &lt;code&gt;vimtutor&lt;/code&gt; and away you go.&lt;/p&gt;
&lt;p&gt;Next, install a package manager (I recommend &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;vundle&lt;/a&gt;) and just start using vanilla vim. When you get stuck and don’t know a particular shortcut, google it! Each time you find a missing feature that you need, find a plugin to fill that gap, install it, configure it and keep going. This starts off being really quite tedious as you are battling with learning the keyboard shortcuts while also hunting down the plugins you need. For the first two weeks expect to be really slow… For the next six weeks you’ll likely still be slow as you search for all the plugins you need to configure vim to your liking and add back the functionality Sublime and Atom gave you for free. After that, things get easier!&lt;/p&gt;
&lt;p&gt;[Editors note: I used a cheat sheet like this - &lt;a href=&quot;http://www.viemu.com/vi-vim-cheat-sheet.gif&quot;&gt;http://www.viemu.com/vi-vim-cheat-sheet.gif&lt;/a&gt;. Also, &lt;a href=&quot;http://vim-adventures.com/&quot;&gt;vim-adventures&lt;/a&gt; is great]&lt;/p&gt;
&lt;p&gt;So why put yourself through this pain when you can copy someone’s config? The reason I advocate not using someone else’s vim configuration (.vimrc file) is that it’s really important to know how to configure vim for yourself to get the most out of it. Learning how to install and configure plugins yourself is key to setting up vim the way you want to work. Over time your vim configuration becomes a very personal setup for how you like to code and what is most efficient for you.&lt;/p&gt;
&lt;p&gt;If you copy someone’s vim config, you will get a bunch of plugins, configuration and shortcuts for free. But will you know what all their plugins do and what all their shortcuts are? If you’re lucky you might know how to &lt;strong&gt;use&lt;/strong&gt; most of their plugins/shortcuts but that is assuming they’ve documented it well. But even if you know the shortcuts you’re unlikely to know what plugin gives you what feature unless their .vimrc is extensively well documented. This leads to the situation where you have a bunch of plugins you’re potentially not even using but because you’re unsure about what does what you don’t know what you can / cannot remove. It’s also really hard to further customise when you don’t have the foundational knowledge of how your configuration is setup.&lt;/p&gt;
&lt;p&gt;This is why I strongly recommend you learn vim the hard way and persevere through the frustration and customise vim yourself from the ground up. Read up on how other people have configured vim and what plugins they use but install each one individually and configure it the way you want to use it. This means you’ll only have installed the plugins that you need and none of the plugins that you don’t!&lt;/p&gt;
&lt;h3 id=&quot;should-i-learn-vim-&quot;&gt;Should I learn Vim?&lt;/h3&gt;
&lt;p&gt;That depends.&lt;/p&gt;
&lt;p&gt;If you’re new to programming don’t learn vim. Learning to code is hard enough without making life difficult for yourself. Atom and Sublime have a much lower barrier to entry.&lt;/p&gt;
&lt;p&gt;If you plan on making a career in writing words on computers, it makes sense to invest in your tools. The extra efficiency you gain will really add up over the course of 30 years.&lt;/p&gt;
&lt;p&gt;Do you want the fastest possible text editing? and can you afford to be inefficient at coding for at least a month, more likely two? If the answer to these two questions is yes then I would suggest taking the plunge.&lt;/p&gt;
&lt;h3 id=&quot;anything-else-&quot;&gt;Anything else?&lt;/h3&gt;
&lt;p&gt;If you’re interested, &lt;a href=&quot;https://github.com/s-taylor/dotfiles/blob/master/.vimrc&quot;&gt;my .vimrc&lt;/a&gt; can be found on github and plenty of other good configs are just a google away. But use it wisely and don’t copy and paste :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Rails Girls</title>
      <link>http://blog.prismatik.com.au/articles/railsgirls/</link>
      <pubDate>Thu, 20  Aug 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/railsgirls/</guid>
      <author></author>
      <description>&lt;p&gt;Women are great technologists - particularly in innovative work - and despite a positive increase in the number of women in tech, they are &lt;a href=&quot;http://idbdocs.iadb.org/wsdocs/getdocument.aspx?docnum=38595127&quot;&gt;still highly under-represented&lt;/a&gt;. With shortages in the supply of trained professionals in technical disciplines and many good arguments about the &lt;a href=&quot;http://www.entrepreneur.com/article/240550&quot;&gt;benefits of diversity in the workplace&lt;/a&gt;, we are of the firm opinion that the tech industry as a whole would benefit from becoming more inclusive. We are committed to helping that change happen.&lt;/p&gt;
&lt;p&gt;There are a lot of amazing humans that contribute to tech in many and varied ways, and those people are - and should be - of all genders, persuasions, skin colours, creeds and varieties. Sadly, though, it’s often much more difficult for people from under-represented groups to feel welcome and valued in tech. This is compounded by the fact that they often - although thankfully not always - have less access to the same opportunities.&lt;/p&gt;
&lt;p&gt;The biggest challenges facing diversity in tech companies today aren’t that companies are not interested in hiring people from under-represented groups; but that companies’ selection criteria are subtly weighted against diversity, and their networks  don’t always naturally intersect with diverse groups. Hiring “the right person for the job” often becomes “the right person for the job right now”. That short-term bias acts against people from under-represented groups that have often had less encouragement, less access to opportunities and less valuable experience, yet whom - when given a chance - flourish into valuable employees. Employees who are not only very often great at their jobs, but more grateful and engaged than their majority-group compatriots.&lt;/p&gt;
&lt;p&gt;We believe that wherever any of us sees an opportunity to make a positive change, we all benefit from taking that opportunity. To that end, we are very proud today to announce our platinum sponsorship of lunch at &lt;a href=&quot;http://railsgirls.com/sydney&quot;&gt;Rails Girls Sydney&lt;/a&gt;. Rails Girls is a fantastic community initiative aimed at getting women and girls involved in technology in a welcoming environment. We couldn’t be happier to be helping.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A Journey Of Discovery</title>
      <link>http://blog.prismatik.com.au/articles/a-journey-of-discovery/</link>
      <pubDate>Thu, 20  Aug 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/a-journey-of-discovery/</guid>
      <author></author>
      <description>&lt;p&gt;The discovery phase of a project is both daunting and exciting. It is where
project goals are moulded from the clay of a scope document into tangible
milestones that will be reached in the near future. Here we validate
the &lt;em&gt;why&lt;/em&gt; of all the things and have the choice of a myriad of different
methods available to tickle out the right information which will help you
solve the directional puzzle that is the discovery phase. I recently stared
down the barrel of this phase and saw it as a great opportunity to get my
hands dirty with some practices I’d never tried before.&lt;/p&gt;
&lt;p&gt;The goal of this article is to provide a high level summary of methods we use
here at Prismatik to home in on the core essentials we need to kick off a
build process. There are plenty of helpful articles out there that explain each
method in more detail, so I’ll only be taking a shallow dive into each and
provide links as I go on what I found useful if you’d like to learn more.&lt;/p&gt;
&lt;h3 id=&quot;personas&quot;&gt;Personas&lt;/h3&gt;
&lt;p&gt;First we start with personas; a way to model and summarize known and suggested
assumptions you make about the intended users of your product. They allow you
to build empathy with your users and help keep a frame of reference when
designing and building features. We work through personas with the client –
at least two for each user type – and knuckle down what personas will be
relevant for the first phase of the project. These are undoubtedly the corner
pieces of your puzzle.&lt;/p&gt;
&lt;h3 id=&quot;user-stories&quot;&gt;User stories&lt;/h3&gt;
&lt;p&gt;Next we move on to user stories; a breakdown of each task a user can accomplish
within the product experience. Personas slot comfortably into your user stories
as the &lt;em&gt;role&lt;/em&gt; of the story. User stories help remind the team of user
motivations and most importantly, why a user wants to do things.&lt;/p&gt;
&lt;p&gt;One aspect of the user stories we have recently introduced into our work flow
are &lt;em&gt;acceptance criterias&lt;/em&gt;. These define what checks off the user story as
complete as long as the criteria is met. They can also be used to help develop
story tasks, and subsequently used later during QA (double bonus!). We use
&lt;a href=&quot;https://taiga.io&quot;&gt;Taiga&lt;/a&gt; for managing user stories and have found it to be a
great addition to our tool belt.&lt;/p&gt;
&lt;h3 id=&quot;api&quot;&gt;API&lt;/h3&gt;
&lt;p&gt;We’ve arrived in API land; all of us are big fans of
&lt;a href=&quot;http://json-schema.org&quot;&gt;JSON Schema&lt;/a&gt; here at Prismatik and modelling your
resources with well defined schemas is a solid start. Our chief geek
&lt;a href=&quot;https://twitter.com/davidbanham&quot;&gt;David Banham&lt;/a&gt; has given an
&lt;a href=&quot;http://slides.davidbanham.com/little_schema&quot;&gt;insightful presentation&lt;/a&gt; on
the topic and I’d recommend you give it a read.&lt;/p&gt;
&lt;p&gt;In the beginning you may need to make assumptions about how resources might be
modelled. These loose ends can be tightened up during the discovery phase as
you revisit your schemas in an iterative fashion. It’s important to ensure that
your API is a source of truth for the project. Any issues with your API will
amplify tenfold further down the road with your application logic. You don’t
want that. We use &lt;a href=&quot;https://github.com/interagent/prmd&quot;&gt;Heroku’s PRMD tool&lt;/a&gt; to
generate API docs.&lt;/p&gt;
&lt;h3 id=&quot;user-flows&quot;&gt;User flows&lt;/h3&gt;
&lt;p&gt;Now for something more visual; a representation of the user’s flow to complete
tasks within the product. User flows are represented from the user’s
perspective and should clearly identify each step taken. Concise and granular
works best — some user flows can be wickedly long — as this helps to keep
actions on point and make them digestible for discussion and improvement.
Creating user flows is a great method to work in sync with your client. The
visualisation of these flows helps everyone provide a rationale as to why a
user should be doing things to achieve things, and it becomes clear uberfast if
there are holes in the process, or superfluous actions being mapped for a user
that don’t tie in with your project goals. We use a combination of
&lt;a href=&quot;https://signalvnoise.com/posts/1926-a-shorthand-for-designing-ui-flows&quot;&gt;hand sketched&lt;/a&gt;
flows (because our drawing skills are mad good brah) and
&lt;a href=&quot;https://balsamiq.com&quot;&gt;Balsamiq&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;prototype&quot;&gt;Prototype&lt;/h3&gt;
&lt;p&gt;We arrive at out final deliver. We’ve done a lot of thinking about whether it’s
better to deliver UX documents and/or complete site experiences. We’ve landed
on placing a prototype in our client’s hands as the best thing. Client’s don’t
&lt;em&gt;read&lt;/em&gt; their product; they &lt;em&gt;use&lt;/em&gt; their product. Creating something usable is a
good way to summarise all of the previous methods undertaken and makes for a
powerful presentation when you can step your client through the journey of
using their product. A prototype nicely laces up decisions and rationale and a
strong focus should be made on content hierarchy and page/feature composition.
There are different levels of complexities for prototypes; they can range from
a simple point and click wireframe adventure, to something that entails feature
functionality. The decision depends on the project, time and budget available;
Recently we created a prototype using
&lt;a href=&quot;https://github.com/google/material-design-lite&quot;&gt;Google’s Material Design Lite&lt;/a&gt;
and this got the job done nicely.&lt;/p&gt;
&lt;p&gt;Trying new and different discovery methods for projects is something to be
encouraged as each project presents a unique set of challenges. Hopefully by
diving further into some of the above, it might seem a little less daunting and
may inspire you to develop and tweak your own work flow to find the right fit.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Codescreen</title>
      <link>http://blog.prismatik.com.au/articles/codescreen/</link>
      <pubDate>Wed, 22 Jul 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/codescreen/</guid>
      <author></author>
      <description>&lt;p&gt;Many pixels have burned out discussing how terrible technical interviews are for everyone involved. At Prismatik, that’s part of our strength. Recruiting, retaining and managing the best software developers is &lt;em&gt;really hard&lt;/em&gt;. The fact that we’re excellent at doing that is our point of differentiation.&lt;/p&gt;
&lt;p&gt;A critical part of a technical interview is to answer the question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can this person actually write code?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having someone produce fibonacci numbers on a whiteboard is horrible. It’s a completely alien environment for starters. Your text editor/IDE, language and API documentation, Google, Stack Overflow, etc are all tools of trade. It’s like asking a carpenter to frame a wall with nothing but a big rock. Next, you’re probably not in the business of selling fibonacci numbers. Anything complex enough to be relevant to your business is probably too much for a whiteboard.&lt;/p&gt;
&lt;p&gt;A better approach is to let someone complete a code screen task in their own time, on their own laptop, in their own home.&lt;/p&gt;
&lt;p&gt;To help with this, we’ve developed a super simple git server. We ask our candidates to spend no more than 30 minutes on the problem. That gives us a fair basis on which to compare candidates. It also respects our applicants by setting a reasonable cap on the amount of unpaid labour they may feel compelled to do.&lt;/p&gt;
&lt;p&gt;A candidate checks out a git repository from a unique URL. They read their challenge in the README contained in the repo. They write their solution using whatever tools they like, just like they would at work. When they’re done making commits, they push their repo back. We take note of how long they spent on the challenge.&lt;/p&gt;
&lt;p&gt;They can push multiple times if they forgot something and there’s no hard time limit. We’re interested in assessing skills, not thinning the herd with gotchas.&lt;/p&gt;
&lt;p&gt;If you’re interested in using our tool, check it out here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Prismatik/codescreen&quot;&gt;https://github.com/Prismatik/codescreen&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Review Apps and Database Seeding</title>
      <link>http://blog.prismatik.com.au/articles/database-seeding/</link>
      <pubDate>Tue, 21 Jul 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/database-seeding/</guid>
      <author></author>
      <description>&lt;p&gt;For our feature development we use &lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&quot;&gt;Feature Branching&lt;/a&gt; workflow. The tl:dr is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We create a separate branch for each new feature we work on. &lt;/li&gt;
&lt;li&gt;Once the feature is complete we create a PR.&lt;/li&gt;
&lt;li&gt;We then get this peer reviewed (by another developer) before merging.&lt;/li&gt;
&lt;li&gt;We update the branch based on any feedback we received.&lt;/li&gt;
&lt;li&gt;Finally merge the PR into master (master should always be production-ready).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can make it tricky to conduct user/client testing. Two options you have are…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Merge all the features into master at the end of an iteration, push to staging and then request the client does their testing. This means the client doesn’t see any features until the end of an iteration. It also somewhat pollutes &lt;code&gt;master&lt;/code&gt; since you can’t call a feature production ready until the client/UAT have signed off.&lt;/li&gt;
&lt;li&gt;Push to a staging server from within your feature branch &lt;strong&gt;before&lt;/strong&gt; you merge into master. The client can then test each feature independently, which is great! Once they sign off, that branch can then be merged into master. The caveat is that it makes it difficult to test multiple branches concurrently. Developers must collaborate to know who’s currently using the staging environment for their pet feature. You often end up with multiple staging environments to reduce this contention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wouldn’t it be great if each feature branch could have its own private staging environment? Enter Heroku with &lt;a href=&quot;https://devcenter.heroku.com/articles/github-integration-review-apps&quot;&gt;Review Apps&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Review Apps allows you to easily spin up a completely seperate app for any PR you’ve created on github! This is a big step forward as it allows each feature to be tested completely independently. Only once it is given the OK by the client is it merged into master.&lt;/p&gt;
&lt;p&gt;A gotcha here is that you don’t want each of these apps to share the same database. If your feature contains a schema change you’re going to have a bad time.&lt;/p&gt;
&lt;p&gt;The ideal state is to have a separate database for each PR app. For this to work we need to seed some data into the database for the client to use. At a bare minimum we’d need to create user accounts so the client can actually login to test! This lead me down the path of looking into a solution to re-seed our database every time we spin up a new PR app.&lt;/p&gt;
&lt;p&gt;To give this some context…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a nodeJS codebase&lt;/li&gt;
&lt;li&gt;The project uses Mongo as the database and Mongoose as the database interface&lt;/li&gt;
&lt;li&gt;The data structure is actually fairly relational, despite using a document database&lt;/li&gt;
&lt;li&gt;I’ll use the example of a customer model that has many users to illustrate the problem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seeding a database is a relatively trivial task. All you need to do is create a bunch of dummy data that conforms to your schema. The only challenging aspect of this is the relationships that exist between the models. The legacy code we had in place to seed the database was written within several javascript files that are executed when starting the app if the database is fresh.&lt;/p&gt;
&lt;p&gt;There were two aspects I didn’t like about the existing implementation. Firstly, it seemed overly complex in the way it handled relationships. Child models were being created within the callback of the parent model. Secondly, there was no separation between the dummy data we were seeding and the javascipt code that created this data (the data was stored inline within the javascript files).&lt;/p&gt;
&lt;p&gt;My first thought was to store all the data we wanted to seed in json format. This way the data itself doesn’t contain any code, it’s reasonably easy to read by humans and is fairly trivial to change. As mentioned we use Mongoose to connect to our database, and this allows you to create models in bulk by passing an array of objects into a .create() method so it just needs to read the json and pass it to the Mongoose method for that model.&lt;/p&gt;
&lt;p&gt;The challenge was in how to define the relationships. Originally I thought these couldn’t be stored in json file so went down the path of codifying the relationships. i.e. we create a “customer” first, then to create the users, we read the users in the json file, append the customer id to every user object and then pass these to .create(). This felt gross as the json data was not then representative of the final model state. I really didn’t want the relationships only defined within my code.&lt;/p&gt;
&lt;p&gt;One of my colleagues, &lt;a href=&quot;https://github.com/moll&quot;&gt;Andri&lt;/a&gt;, then suggested that you can just define the id within the json file. Mongoose allows you to define the id (_id) for an object rather than allowing it to generate one. Since relationships in Mongoose are just a string conforming to a docId, you can then just populate all their relationships manually. This was a great suggestion as it avoids needing to “codeify” any of the relationships. I literally threw out half the code I had written. (I challenge you to find a better feeling than a commit that has negative LOC). The only downside to this approach is with Mongo the ids are a 24 character hex string (A-F, 0-9 characters only). Seeing that a user is a child of customer “a000000000000000000000001” was not the level of readability I was aiming for.&lt;/p&gt;
&lt;p&gt;It then occured to me, why not do a simple substitution using some placeholders for my ids? In the json file if I have a customer named “Simon’s Brewery”, I can define an id of $Simon’s-Brewery$. Then for all the user models I can also define their customer_id as $Simon’s-Brewery$. Then, all I need to do within the code is generate a valid mongo id, and replace all instances of $Simon’s-Brewery$ with the mongo id before I seed the database. This gives me a nicely readable json file that defines my relationships &lt;em&gt;and&lt;/em&gt; keeps relationship definitions completely out of my code. I’ve used $text-here$ as the format for my mongo id placeholders but you could use any format you want if you can find it with a regex.&lt;/p&gt;
&lt;p&gt;Some psuedo code…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the json file (don’t use require as this parses the json file!)&lt;/li&gt;
&lt;li&gt;Find all the placeholders within the file.&lt;/li&gt;
&lt;li&gt;Filter the placeholders to just unique placeholders&lt;/li&gt;
&lt;li&gt;Generate a mongo id for each unique placeholder&lt;/li&gt;
&lt;li&gt;Substitute each placeholder with the mongo id you created for it (the same mongo id will be assigned to all placeholders with the same name)&lt;/li&gt;
&lt;li&gt;Parse the string now all the substitutions are done&lt;/li&gt;
&lt;li&gt;Pass your string into the relevant .create() methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ultimately I’m pretty happy with the solution as it’s fairly simplistic (just uses find and replace) and keeps all my seed data including relationships in my json file! This also allows developers to update the seed data file any time they change the data structure without updating any code. The final piece of the puzzle is to write some code to auto-create a new database each time we spin up a PR app and then seed this data into it. For this I’ll need to take a closer look at the Mongolab API but that is a story for another day…&lt;/p&gt;
</description>
    </item>
    <item>
      <title>What wasm means for the industry</title>
      <link>http://blog.prismatik.com.au/articles/what-wasm-means-for-the-industry/</link>
      <pubDate>Thu, 18 Jun 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/what-wasm-means-for-the-industry/</guid>
      <author></author>
      <description>&lt;p&gt;It’s a red letter day for the web! Brendan Eich has &lt;a href=&quot;https://brendaneich.com/2015/06/from-asm-js-to-webassembly/&quot;&gt;announced&lt;/a&gt; that the major browser developers are working towards a standard called &lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md&quot;&gt;WebAssembly&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-web-is-already-_amazing_-&quot;&gt;The web is already &lt;em&gt;amazing&lt;/em&gt;.&lt;/h3&gt;
&lt;p&gt;We can deploy a single codebase to every &lt;a href=&quot;https://wiki.apache.org/cordova/PlatformSupport&quot;&gt;major&lt;/a&gt; &lt;a href=&quot;https://github.com/nwjs/nw.js/wiki/How-to-package-and-distribute-your-apps#windows&quot;&gt;platform&lt;/a&gt;. We can deliver &lt;a href=&quot;http://diveintohtml5.info/offline.html&quot;&gt;offline&lt;/a&gt; experiences that incorporate seamless &lt;a href=&quot;http://pouchdb.com/&quot;&gt;syncing&lt;/a&gt; and updating. We can create &lt;a href=&quot;https://github.com/rtc-io/rtc-mesh&quot;&gt;distributed peer-to-peer topologies&lt;/a&gt;. We can do &lt;a href=&quot;https://talky.io/&quot;&gt;audio and video chat&lt;/a&gt;. We can do rich &lt;a href=&quot;https://www.youtube.com/watch?v=XsyogXtyU9o&quot;&gt;3D graphics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://prismatik.com.au/&quot;&gt;Prismatik&lt;/a&gt; is a polyglot consultancy. People bring us problems, we often solve those problems with computers. When we do, we pick The Right Tool for the job. The vast majority of the time, that ends up involving the web. The web has become such an incredible application platform in recent years that it’s impossible to ignore it. &lt;/p&gt;
&lt;p&gt;Until now, building for the web has meant building in Javascript. We love JS. It’s a much more impressive language than many people give it credit for. &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; allows us to write the same language on both ends of the wire, unlocking great stuff like &lt;a href=&quot;http://isomorphic.net/libraries&quot;&gt;isomorphic frameworks&lt;/a&gt; and portability of library code.&lt;/p&gt;
&lt;p&gt;What if it wasn’t just JS, though? Wouldn’t it be great to write whatever language you like and deploy to the web? Maybe this particular product makes more sense in Go. Maybe Lua, Elixir, Rust, Ruby, OCaml… pick your poison. WebAssembly (wasm) lays the foundation for making that a reality.&lt;/p&gt;
&lt;h3 id=&quot;but-can-t-you-already-do-that-&quot;&gt;But can’t you already do that?&lt;/h3&gt;
&lt;p&gt;Well, &lt;em&gt;kinda&lt;/em&gt;. You could already use &lt;a href=&quot;http://kripken.github.io/emscripten-site/&quot;&gt;emscripten&lt;/a&gt; to compile &lt;a href=&quot;http://llvm.org/&quot;&gt;LLVM&lt;/a&gt; code into &lt;a href=&quot;http://asmjs.org/&quot;&gt;asm.js&lt;/a&gt;. Some browsers had specific optimisation for asm.js code, making it &lt;a href=&quot;http://kripken.github.io/misc-js-benchmarks/banana/benchmark.html&quot;&gt;pretty dang snappy&lt;/a&gt;! While it worked, it was still a hack at heart. Asm.js and the emscripten pipeline was a fantastic proof of concept. It made us realise that this kind of thing was not only desirable, but feasible.&lt;/p&gt;
&lt;p&gt;The path laid out is that asm.js will effectively be paralleled and then superseded by wasm. The fact that it will no longer be based on Javascript means that we can evolve the capabilities of wasm without being bound by backwards compatibility with JS. That is &lt;em&gt;exciting&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There’s still work to do. Language X will still need to support wasm as a compilation target (although if it’s already got a path to llvm, most of the work might already be done). To make it useful, there will need to be a way to call and manipulate the DOM. A reliable, planned standard will greatly encourage that work to occur.&lt;/p&gt;
&lt;p&gt;tl:dr, maybe we’ll see an isomorphic web framework in every major language. That would be &lt;em&gt;incredible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Always bet on the web.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Technical Debt</title>
      <link>http://blog.prismatik.com.au/articles/technical-debt/</link>
      <pubDate>Thu, 04 Jun 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/technical-debt/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;h4 id=&quot;technical-debt-is-simultaneously-the-most-difficult-and-most-important-concept-we-must-communicate-to-our-clients-&quot;&gt;Technical debt is simultaneously the most difficult and most important concept we must communicate to our clients.&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;Debt is a tool like any other. Paying for things on a high interest credit card is often okay.&lt;/p&gt;
&lt;p&gt;It’s especially okay if you’re purchasing an asset that will earn you money at a higher rate of return than the interest you’re paying. Incurring debt is fine, provided you have the means to support the obligation.&lt;/p&gt;
&lt;p&gt;You must never forget that the debt exists. You must either repay the principal or continue paying the interest. If you take too long repaying the principal, the cumulative interest payments will wipe out the profit you made on the asset.&lt;/p&gt;
&lt;h3 id=&quot;let-s-map-this-analogy-back-to-software&quot;&gt;Let’s map this analogy back to software&lt;/h3&gt;
&lt;p&gt;Your team has a level of equilibrium. &lt;strong&gt;This is the pace at which they can add new features while still having time to consolidate, test and refactor.&lt;/strong&gt; This pace can be maintained indefinitely. Pushing them beyond this level is putting features on your credit card.&lt;/p&gt;
&lt;p&gt;Your credit card has interest. The payment of that interest is that every feature you wish to add will take longer and have more bugs.&lt;/p&gt;
&lt;p&gt;This interest compounds, too. The longer the principal remains unpaid, the more workarounds and quick fixes your team will need to implement.&lt;/p&gt;
&lt;p&gt;To repay that principal, you need to spend some time on the technical fundamentals of your product. You need to spend some time adding new features &lt;em&gt;below&lt;/em&gt; your level of equilibrium. Your reward will be increased feature velocity, less rework and a happier, more engaged team. Your equilibrium level will be raised. Chances are, you’ll end up with some performance benefits along the way. (You know &lt;a href=&quot;http://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales&quot;&gt;how important performance is to your users&lt;/a&gt;, right?)&lt;/p&gt;
&lt;p&gt;Your development team already knows exactly where and how to invest this time. You just need to allow them to do it.&lt;/p&gt;
&lt;h3 id=&quot;but-software-isn-t-really-like-finance-right-&quot;&gt;But software isn’t really like finance, right?&lt;/h3&gt;
&lt;p&gt;Well, the analogy gets a lot more real when you recall that you pay your developers with money.&lt;/p&gt;
&lt;p&gt;If you run faster than your equilibrium, you will impact the future productivity of your team. You can regain that productivity either by lessening the pace of feature development or buying more development capacity. The former costs you money by lessening the ROI of your wage bill. The latter costs you money by, well, costing you money.&lt;/p&gt;
&lt;p&gt;I hear your inner accountant stirring. Before you start looking up your current benchmark &lt;a href=&quot;https://en.wikipedia.org/wiki/Internal_rate_of_return&quot;&gt;IRR&lt;/a&gt; and calculating &lt;a href=&quot;https://en.wikipedia.org/wiki/Net_present_value&quot;&gt;NPV&lt;/a&gt;, though, the economists need to have their turn. As always, there are &lt;a href=&quot;https://en.wikipedia.org/wiki/Externality&quot;&gt;externalities&lt;/a&gt; to be considered.&lt;/p&gt;
&lt;p&gt;The entire time this situation is going on, your product is slower, buggier and less stable than it needs to be. That’s a very difficult thing to price.&lt;/p&gt;
&lt;p&gt;Finally, you can only grow your team so large before it becomes &lt;a href=&quot;https://en.wikipedia.org/wiki/Diminishing_returns&quot;&gt;unwieldy and unproductive&lt;/a&gt;. You can only pile so many band-aids on top of one another before the whole tower comes &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;toppling over&lt;/a&gt;. Eventually, the bank will become concerned about your capacity to repay and will make a &lt;a href=&quot;https://en.wikipedia.org/wiki/Margin_%28finance%29#Margin_call&quot;&gt;margin call&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The key things to keep in mind are:&lt;/p&gt;
&lt;h5 id=&quot;1-the-principal-must-be-repaid-&quot;&gt;1. The principal must be repaid.&lt;/h5&gt;
&lt;h5 id=&quot;2-the-interest-compounds-&quot;&gt;2. The interest compounds.&lt;/h5&gt;
&lt;h5 id=&quot;3-don-t-let-yourself-be-surprised-by-that-margin-call-&quot;&gt;3. Don’t let yourself be surprised by that margin call.&lt;/h5&gt;
</description>
    </item>
    <item>
      <title>Benefits of Service Oriented Architectures</title>
      <link>http://blog.prismatik.com.au/articles/soa/</link>
      <pubDate>Wed, 06 May 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/soa/</guid>
      <author></author>
      <description>&lt;p&gt;At Prismatik our core technical principle is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;###Use the right tool for the job.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the things this results in is how we architect applications. For a lot of the things we build, a service oriented architecture (SOA) is a great choice.&lt;/p&gt;
&lt;p&gt;Step one in building an SOA is to separate your application into concerns. For example, authentication of users and gamification of user actions are two different things. In a traditional monolithic architecture, these would probably be lumped into one process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/soa/monolith_1.png&quot; alt=&quot;A small monolith with two functions&quot;&gt;&lt;/p&gt;
&lt;p&gt;In an SOA these would be separate services, living in separate repositories, potentially on separate servers. This makes your architecture diagram a little more complex.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/soa/soa_1.png&quot; alt=&quot;A small SOA with two services&quot;&gt;&lt;/p&gt;
&lt;p&gt;But it makes the code we write wonderfully simple. In the monolith, you can separate your concerns into modules. That’s a fine approach, but it can get messy very quickly. It’s all too easy to let state and logic leak from one part of the application to another.&lt;/p&gt;
&lt;p&gt;In the SOA, there is a bright line of demarcation between your concerns. Each service can then be further compartmentalised with modules and other code organisation techniques.&lt;/p&gt;
&lt;p&gt;The maintenance burden of one 10,000 LOC app is about the same as two 6,000 LOC apps.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/soa/monolith_2.png&quot; alt=&quot;A small monolith with two functions totalling 10k LOC&quot;&gt;
&lt;img src=&quot;/articles/soa/soa_2.png&quot; alt=&quot;A small SOA with two services each with 6k LOC&quot;&gt;&lt;/p&gt;
&lt;p&gt;So an SOA really starts paying dividends as your system grows. The monolith grows vertically while the SOA grows horizontally.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/soa/monolith_3.png&quot; alt=&quot;A larger monolith with four functions totalling 40k LOC&quot;&gt;
&lt;img src=&quot;/articles/soa/soa_3.png&quot; alt=&quot;A larger SOA with four services each with 6k LOC&quot;&gt;&lt;/p&gt;
&lt;p&gt;The burden of one 100,000 LOC app is &lt;em&gt;much&lt;/em&gt; greater than the burden of ten 6,000 LOC apps.&lt;/p&gt;
&lt;h2 id=&quot;benefits-to-team-structure&quot;&gt;Benefits to team structure&lt;/h2&gt;
&lt;p&gt;It’s certainly possible to build a monolith with a big team. It takes an awful lot of teamwork, though.&lt;/p&gt;
&lt;p&gt;It entails lots of developers who are all:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in the same repository,&lt;/li&gt;
&lt;li&gt;working on the same code,&lt;/li&gt;
&lt;li&gt;altering the same logic,&lt;/li&gt;
&lt;li&gt;making changes to shared models.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It becomes really easy to step on each other’s toes. This introduces collaboration overhead.&lt;/p&gt;
&lt;p&gt;You get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Merge conflicts,&lt;/li&gt;
&lt;li&gt;big standups,&lt;/li&gt;
&lt;li&gt;cross-team meetings to co-ordinate work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s just no other way to deal with a 100,000 LOC product, though. It’s more than one or two people can handle.&lt;/p&gt;
&lt;p&gt;If you’re doing SOA right, though, each unit of functionality should be about the right size to hand to one or two developers. Tell them to call you if they hit a road block or once they’re finished.&lt;/p&gt;
&lt;p&gt;That’s not even the best bit, though! Each service has a clearly defined API. Deciding that up front takes a bit of planning effort. Remember, though, you’re just designing the API and not the implementation.&lt;/p&gt;
&lt;p&gt;The benefit to this is that your teams are no longer dependent on one another. It doesn’t matter that Bob hasn’t completed the authorisation service yet. Alice can still get on and build the gamification service, since she knows what Bob’s service is going to expect and what it’s going to return.&lt;/p&gt;
&lt;h2 id=&quot;benefits-to-maintainability&quot;&gt;Benefits to maintainability&lt;/h2&gt;
&lt;p&gt;Let’s say you’ve had an app in production for 12 months. We need to make some changes to the gamification module. Users want different tiers of rewards and we want to introduce a social following system.&lt;/p&gt;
&lt;h4 id=&quot;in-the-monolith-our-task-is-&quot;&gt;In the monolith, our task is:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;“Figure out how the existing logic has been implemented. Track down any intertwined logic. Either refactor it out or ensure your changes don’t break anything. Hopefully the last team left you a good test suite.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The early part of this task may well entail needing to understand the entire codebase. Not too hard in a 10k app. In a 100k app you might need to assign a whole team. If you have a 1000k app, call in a project manager to coordinate the discovery process amongst the teams and make sure you’re not planning to ship any other features in the near future.&lt;/p&gt;
&lt;h4 id=&quot;in-the-soa-our-task-is-&quot;&gt;In the SOA, our task is:&lt;/h4&gt;
&lt;p&gt;Broadly the same, but the total possible complexity is limited. It’s just a little service. Spend a few hours reading and grokking the 6k LOC, then make the change.&lt;/p&gt;
&lt;p&gt;There is a clear API contract with the rest of the application to guide us. If it turns out the last developer implemented things badly, just rewrite the thing from scratch. It’s a small task with a clear API and you have a reference implementation to work from.&lt;/p&gt;
&lt;p&gt;We’ll be done in no time. Add some extra API surface area to allow other services to subscribe to change events, then go implement that in a separate social following service.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s say you want to add the ability to process audio in real time. Most of your codebase is in a high-level interpreted language. That’s going to be tricky.&lt;/p&gt;
&lt;p&gt;The monolith has a problem. Maybe your language supports native modules? Can we write a library in C then bind to that? It’s a shame the only option is C/C++, it would be really nice to be able to do this in go/erlang/haskell/etc.&lt;/p&gt;
&lt;p&gt;In the SOA, we get to use the Right Tool For The Job! So long as the service adheres to its API, the rest of the architecture couldn’t care less what language its implemented in.&lt;/p&gt;
&lt;p&gt;Might it have been handy to use a graph/columnar/SQL/noSQL/in-memory database for that one little problem space in your app? No reason we can’t in an SOA.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;SOA is one of the tools available to us. It helps us build big, complex systems with a small, focused team. These systems then stay predictable and maintainable.&lt;/p&gt;
&lt;p&gt;We end up reaching for it a lot.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>8 Lists To Get You Started In The Sydney Startup Community</title>
      <link>http://blog.prismatik.com.au/articles/guide-to-the-sydney-startup-community/</link>
      <pubDate>Sun, 19 Apr 2015 10:00:00 +1000</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/guide-to-the-sydney-startup-community/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;The startup journey can be lonely, but ensuring you’re involved in the community will make it far more enjoyable and ultimately increase your chances of success.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These eight lists are designed to provide you with the best support in town, depending on which part of the journey your startup is at.&lt;/p&gt;
&lt;p&gt;If you’re in the idea stage it may be worth considering hackathons, meetups and networking events. If your startup is just getting going you might like to check out the list of incubators. Or, if you’re looking for further growth, check out the accelerators and venture funding.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-meetups-and-networking&quot;&gt;1. Meetups and Networking&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/sydney-tech-startup/&quot;&gt;Sydney Tech Startup meetup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/Silicon-Beach/&quot;&gt;Silicon Beach meetup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/Fishburners-Meetup/events/215667802/&quot;&gt;Fishburners’ Friday Pitches&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://headsoverheels.com.au/&quot;&gt;Heads over Heels&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sydjs.com/&quot;&gt;SydJS (Javascript developer meetup)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/Ruby-On-Rails-Oceania-Sydney/&quot;&gt;Ruby on Rails Oceania (Ruby on Rails developer meetup)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/ixda-sydney/&quot;&gt;IxDA (User Experience Design meetup)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/Product-Mavens/&quot;&gt;Product Mavens (Product management meetup)&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;2-conference-and-camps&quot;&gt;2. Conference and Camps&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://sydstart.wordpress.com/&quot;&gt;SydStart (Tech startup showcase)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cebit.com.au/&quot;&gt;CeBIT (Business technology conference)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tiecon.org.au/&quot;&gt;TieCon (Global technology conference)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.adtechaustralia.com/&quot;&gt;ad:tech (Advertising technology conference)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yowconference.com.au/&quot;&gt;Yow! (Developer conference)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v.campjs.com/&quot;&gt;Camp JS (Javascript developer camp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://railscamps.com/&quot;&gt;Rails Camp (Ruby on Rails developer camp)&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;3-hackathons-and-pitch-competitions&quot;&gt;3. Hackathons and Pitch Competitions&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.seedstarsworld.com/event/seedstars-sydney-2015/&quot;&gt;Seedstars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2015.battlehack.org/&quot;&gt;Battlehack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.govhack.org/&quot;&gt;GovHack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ecohack.org/&quot;&gt;EcoHack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://angelhack.com/events/&quot;&gt;AngelHack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sydneyappiness.com/&quot;&gt;Appiness&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.nswcodeworks.com/&quot;&gt;Code Works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/hackathon&quot;&gt;Facebook Hackathon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://girlgeeksydney.com/&quot;&gt;She Hacks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hackagong.com/&quot;&gt;Hackagong&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;4-incubators&quot;&gt;4. Incubators&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://atp-innovations.com.au/&quot;&gt;ATP Innovations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bluechilli.com/&quot;&gt;Blue Chilli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pollenizer.com/&quot;&gt;Pollenizer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fi.co/&quot;&gt;Founder Institute&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-accelerators&quot;&gt;5. Accelerators&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.slingshotters.com/&quot;&gt;Slingshot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://incubate.org.au/&quot;&gt;Incubate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.innovyz.com/&quot;&gt;ANZ Innovyz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sb.co/&quot;&gt;Springboard Enterprises&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://muru-d.com/&quot;&gt;Muru-D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.elevate61.com.au/&quot;&gt;Elevate 61&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://25fifteen.com/&quot;&gt;25fifteen&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;6-angel-seed-venture-funding&quot;&gt;6. Angel / Seed / Venture Funding&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.one-ventures.com.au/&quot;&gt;One Ventures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sydneyangels.net.au/&quot;&gt;Sydney Angels&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tankstream.vc/&quot;&gt;Tank Stream Ventures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sxvp.com/&quot;&gt;Southern Cross Ventures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.rightclickcapital.com/&quot;&gt;Right Click Capital&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.greenlanedigital.com.au/&quot;&gt;Green Lane Digital&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.blackcitrus.com.au/&quot;&gt;Black Citrus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://optusinnov8seed.com.au/&quot;&gt;Optus Innov8 Seed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://airtreevc.com/&quot;&gt;Airtree Ventures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blackbird.vc/&quot;&gt;Blackbird Ventures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mhcarnegie.com/&quot;&gt;MH Carnegie&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.innovationcapital.net/&quot;&gt;Innovation Capital&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://innovationbay.com/&quot;&gt;Innovation Bay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sydneyseedfund.com.au/&quot;&gt;Sydney Seed Fund&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;7-education&quot;&gt;7. Education&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://generalassemb.ly&quot;&gt;General Assembly (Web Development, User Experience Design, Product Management, Digital Marketing)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://thecoderfactory.com/&quot;&gt;Coder Factory (Web Development)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.brainmates.com.au/&quot;&gt;Brainmates&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;8-co-working-spaces-and-offices&quot;&gt;8. Co-working spaces and offices&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://fishburners.org/&quot;&gt;Fishburners&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.commonroomsyd.com.au/&quot;&gt;Common Room&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://startsoc.wordpress.com/icentral/&quot;&gt;iCentral&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tankstreamlabs.com/&quot;&gt;Tank Stream Labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://theworkben.ch/&quot;&gt;Workbench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hubaustralia.com/location/sydney/&quot;&gt;Hub Sydney&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>http://blog.prismatik.com.au/articles/hello-world/</link>
      <pubDate>Tue, 17 Mar 2015 11:00:00 +1100</pubDate>
      <guid isPermaLink="true">http://blog.prismatik.com.au/articles/hello-world/</guid>
      <author></author>
      <description>&lt;p&gt;Hello world!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>